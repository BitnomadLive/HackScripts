"""
This script takes a HAR archive as an input and transforms
it in an python script that executes the same request order
"""

import argparse
from io import BufferedReader
import json



def construct_python_code(python_script: str, request_url: str, request_method: str,request_header: dict) -> str:
    """construct python code for every individual request

    Args:
      python_script: the already generated python code
      request_url: the request url
      request_method: the request method
      request_header: request headers

    Returns:
      Generated python script for a request as a string

    """  

    #change to list and join
    python_script += f'url = "{request_url}"\n'
    python_script += f'headers = {request_header}\n'
    python_script += f'r=r.{request_method.lower()}(url,headers=headers)\n\n'
    return python_script




def har_to_python(input_file: BufferedReader) -> str:
    """Parses HAR archive and returns python code

    Args:
      input_file: path of the input file

    Returns:
      Generated python script as a string

    Raises:
      NotImplementedError: If certain fields out of the HAR file are not handled
    """

    #try except to see if this is a json file
    har_archive = json.load(input_file)
    python_script = "import requests\n\n"

    #try except to see if the entries exist
    for entry in har_archive['log']['entries']:
      request_method = entry['request']['method']

      request_url = entry['request']['url']

      request_header = {}
      for header in entry['request']['headers']:
        request_header[header['name']] = header['value']

     

      #print(request_header)
      python_script = construct_python_code(python_script, request_url, request_method, request_header)
      
    print(python_script)

    return python_script


def main():
    parser = argparse.ArgumentParser(
        description = ('This script takes HAR archives generated by  '
                       'ZAP Attack Proxy and outputs a python'
                       'script that performs the same '
                       'HTTP requests specified in the HAR archive" ')
    )
    parser.add_argument(
        '-i',
        dest = 'input_file',
        default = '-',
        type = argparse.FileType('rb'),
    )
    parser.add_argument(
        '-o',
        dest = 'output_file',
        default = '-',
        type = argparse.FileType('w'),
    )
    args = parser.parse_args()

    #print(type(args.input_file))
    python_script = har_to_python(args.input_file)
    args.output_file.write(python_script)

if __name__ == '__main__':
    main()